/**
* event331-api
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
*
* OpenAPI spec version: 0.0.4
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.CreateCommentInput
import io.swagger.client.models.CreateCommentOutput

import io.swagger.client.infrastructure.*

class CommentApi(basePath: kotlin.String = "https://event331-api.azurewebsites.net") : ApiClient(basePath) {

    /**
    * 
    * 
    * @param input  
    * @param xAuthorization  (optional, default to )
    * @return CreateCommentOutput
    */
    @Suppress("UNCHECKED_CAST")
    fun apiCommentCreate(input: CreateCommentInput, xAuthorization: kotlin.String) : CreateCommentOutput {
        val localVariableBody: kotlin.Any? = input
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf("X-Authorization" to xAuthorization)
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/Comment/Create",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<CreateCommentOutput>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CreateCommentOutput
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
